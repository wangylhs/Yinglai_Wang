; LABEL   F
;      successor   LINK   
;      gen
;      kill
;      in     $P1
;      out     $P1
;      free   0  
;      free   1  
;      free   2  
;      free   3  
;      r0 null;      r1 null;      r2 null;      r3 null
; LINK   
;      predecessor   LABEL   F
;      successor   STOREI 2  $T1
;      gen
;      kill
;      in     $P1
;      out     $P1
;      r0 null;      r1 null;      r2 null;      r3 null
; STOREI 2  $T1
;      predecessor   LINK   
;      successor   LE $P1 $T1 label1
;      gen
;      kill     $T1
;      in     $P1
;      out     $P1     $T1
;      ensure  $-3
;      allocate   $-3
;      r0 null;      r1 null;      r2 null;      r3 $-3
; LE $P1 $T1 label1
;      predecessor   STOREI 2  $T1
;      successor   STOREI 1  $T2
;      successor   LABEL   label1
;      gen     $P1     $T1
;      kill
;      in     $P1     $T1
;      out     $P1
;      ensure  $6
;      allocate   $6
;      ensure  $-3
;      free   3  $-3
;      free   0  
;      free   1  
;      free   2  $6
;      free   3  $-3
;      r0 null;      r1 null;      r2 null;      r3 null
; STOREI 1  $T2
;      predecessor   LE $P1 $T1 label1
;      successor   SUBI $P1 $T2 $T3
;      gen
;      kill     $T2
;      in     $P1
;      out     $P1     $T2
;      ensure  $-4
;      allocate   $-4
;      r0 null;      r1 null;      r2 null;      r3 $-4
; SUBI $P1 $T2 $T3
;      predecessor   STOREI 1  $T2
;      successor   PUSH   
;      gen     $P1     $T2
;      kill     $T3
;      in     $P1     $T2
;      out     $P1     $T3
;      ensure  $6
;      allocate   $6
;      ensure  $-4
;      free   3  $-4
;      free   2  $6
;      r0 null;      r1 null;      r2 $-5;      r3 null
; PUSH   
;      predecessor   SUBI $P1 $T2 $T3
;      successor   PUSH   $T3
;      gen
;      kill
;      in     $P1     $T3
;      out     $P1     $T3
;      r0 null;      r1 null;      r2 $-5;      r3 null
; PUSH   $T3
;      predecessor   PUSH   
;      successor   JSR   F
;      gen     $T3
;      kill
;      in     $P1     $T3
;      out     $P1
;      ensure  $-5
;      free   2  $-5
;      r0 null;      r1 null;      r2 null;      r3 null
; JSR   F
;      predecessor   PUSH   $T3
;      successor   POP   
;      gen
;      kill
;      in     $P1
;      out     $P1
;      free   0  
;      free   1  
;      free   2  $-5
;      free   3  $-4
;      r0 null;      r1 null;      r2 null;      r3 null
; POP   
;      predecessor   JSR   F
;      successor   POP   $T4
;      gen
;      kill
;      in     $P1
;      out     $P1
;      r0 null;      r1 null;      r2 null;      r3 null
; POP   $T4
;      predecessor   POP   
;      successor   STOREI $T4  $L1
;      gen
;      kill     $T4
;      in     $P1
;      out     $P1     $T4
;      allocate   $-6
;      r0 null;      r1 null;      r2 null;      r3 $-6
; STOREI $T4  $L1
;      predecessor   POP   $T4
;      successor   STOREI 2  $T5
;      gen     $T4
;      kill     $L1
;      in     $P1     $T4
;      out     $L1     $P1
;      ensure  $-6
;      ensure  $-1
;      allocate   $-1
;      free   3  $-6
;      free   3  $-6
;      r0 null;      r1 null;      r2 $-1;      r3 null
; STOREI 2  $T5
;      predecessor   STOREI $T4  $L1
;      successor   SUBI $P1 $T5 $T6
;      gen
;      kill     $T5
;      in     $L1     $P1
;      out     $L1     $P1     $T5
;      ensure  $-7
;      allocate   $-7
;      r0 null;      r1 null;      r2 $-1;      r3 $-7
; SUBI $P1 $T5 $T6
;      predecessor   STOREI 2  $T5
;      successor   PUSH   
;      gen     $P1     $T5
;      kill     $T6
;      in     $L1     $P1     $T5
;      out     $L1     $T6
;      ensure  $6
;      allocate   $6
;      ensure  $-7
;      free   1  $6
;      free   3  $-7
;      r0 null;      r1 $-8;      r2 $-1;      r3 null
; PUSH   
;      predecessor   SUBI $P1 $T5 $T6
;      successor   PUSH   $T6
;      gen
;      kill
;      in     $L1     $T6
;      out     $L1     $T6
;      r0 null;      r1 $-8;      r2 $-1;      r3 null
; PUSH   $T6
;      predecessor   PUSH   
;      successor   JSR   F
;      gen     $T6
;      kill
;      in     $L1     $T6
;      out     $L1
;      ensure  $-8
;      free   1  $-8
;      r0 null;      r1 null;      r2 $-1;      r3 null
; JSR   F
;      predecessor   PUSH   $T6
;      successor   POP   
;      gen
;      kill
;      in     $L1
;      out     $L1
;      free   0  
;      free   1  $-8
;      free   3  $-7
;      r0 null;      r1 null;      r2 $-1;      r3 null
; POP   
;      predecessor   JSR   F
;      successor   POP   $T7
;      gen
;      kill
;      in     $L1
;      out     $L1
;      r0 null;      r1 null;      r2 $-1;      r3 null
; POP   $T7
;      predecessor   POP   
;      successor   STOREI $T7  $L2
;      gen
;      kill     $T7
;      in     $L1
;      out     $L1     $T7
;      allocate   $-9
;      r0 null;      r1 null;      r2 $-1;      r3 $-9
; STOREI $T7  $L2
;      predecessor   POP   $T7
;      successor   STOREI $L1  $T8
;      gen     $T7
;      kill     $L2
;      in     $L1     $T7
;      out     $L2     $L1
;      ensure  $-9
;      ensure  $-2
;      allocate   $-2
;      free   3  $-9
;      free   3  $-9
;      r0 null;      r1 $-2;      r2 $-1;      r3 null
; STOREI $L1  $T8
;      predecessor   STOREI $T7  $L2
;      successor   STOREI $L2  $T9
;      gen     $L1
;      kill     $T8
;      in     $L2     $L1
;      out     $T8     $L2
;      ensure  $-1
;      ensure  $-10
;      allocate   $-10
;      free   2  $-1
;      free   2  $-1
;      r0 null;      r1 $-2;      r2 null;      r3 $-10
; STOREI $L2  $T9
;      predecessor   STOREI $L1  $T8
;      successor   ADDI $T8 $T9 $T10
;      gen     $L2
;      kill     $T9
;      in     $T8     $L2
;      out     $T8     $T9
;      ensure  $-2
;      ensure  $-11
;      allocate   $-11
;      free   1  $-2
;      free   1  $-2
;      r0 null;      r1 null;      r2 $-11;      r3 $-10
; ADDI $T8 $T9 $T10
;      predecessor   STOREI $L2  $T9
;      successor   STOREI $T10  $R
;      gen     $T8     $T9
;      kill     $T10
;      in     $T8     $T9
;      out     $T10
;      ensure  $-10
;      ensure  $-11
;      free   3  $-10
;      free   2  $-11
;      r0 null;      r1 null;      r2 null;      r3 $-12
; STOREI $T10  $R
;      predecessor   ADDI $T8 $T9 $T10
;      successor   RET   
;      gen     $T10
;      kill     $R
;      in     $T10
;      out
;      ensure  $-12
;      free   3  $-12
;      free   3  $-12
;      r0 null;      r1 null;      r2 null;      r3 null
; RET   
;      predecessor   STOREI $T10  $R
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-2
;      free   2  $-11
;      free   3  $-12
;      r0 null;      r1 null;      r2 null;      r3 null
; JUMP   label2
;      successor   LABEL   label2
;      gen
;      kill
;      in     $P1
;      out     $P1
;      free   0  
;      free   1  $-2
;      free   2  $-11
;      free   3  $-12
;      r0 null;      r1 null;      r2 null;      r3 null
; LABEL   label1
;      predecessor   LE $P1 $T1 label1
;      successor   LABEL   label2
;      gen
;      kill
;      in     $P1
;      out     $P1
;      free   0  
;      free   1  $-2
;      free   2  $-11
;      free   3  $-12
;      r0 null;      r1 null;      r2 null;      r3 null
; LABEL   label2
;      predecessor   JUMP   label2
;      predecessor   LABEL   label1
;      successor   STOREI 0  $T11
;      gen
;      kill
;      in     $P1
;      out     $P1
;      free   0  
;      free   1  $-2
;      free   2  $-11
;      free   3  $-12
;      r0 null;      r1 null;      r2 null;      r3 null
; STOREI 0  $T11
;      predecessor   LABEL   label2
;      successor   NE $P1 $T11 label3
;      gen
;      kill     $T11
;      in     $P1
;      out     $P1     $T11
;      ensure  $-13
;      allocate   $-13
;      r0 null;      r1 null;      r2 null;      r3 $-13
; NE $P1 $T11 label3
;      predecessor   STOREI 0  $T11
;      successor   STOREI 0  $T12
;      successor   LABEL   label3
;      gen     $P1     $T11
;      kill
;      in     $P1     $T11
;      out     $P1
;      ensure  $6
;      allocate   $6
;      ensure  $-13
;      free   3  $-13
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-13
;      r0 null;      r1 null;      r2 null;      r3 null
; STOREI 0  $T12
;      predecessor   NE $P1 $T11 label3
;      successor   STOREI $T12  $R
;      gen
;      kill     $T12
;      in
;      out     $T12
;      ensure  $-14
;      allocate   $-14
;      r0 null;      r1 null;      r2 null;      r3 $-14
; STOREI $T12  $R
;      predecessor   STOREI 0  $T12
;      successor   RET   
;      gen     $T12
;      kill     $R
;      in     $T12
;      out
;      ensure  $-14
;      free   3  $-14
;      free   3  $-14
;      r0 null;      r1 null;      r2 null;      r3 null
; RET   
;      predecessor   STOREI $T12  $R
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-14
;      r0 null;      r1 null;      r2 null;      r3 null
; JUMP   label4
;      successor   LABEL   label4
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-14
;      r0 null;      r1 null;      r2 null;      r3 null
; LABEL   label3
;      predecessor   NE $P1 $T11 label3
;      successor   STOREI 0  $T13
;      gen
;      kill
;      in     $P1
;      out     $P1
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-14
;      r0 null;      r1 null;      r2 null;      r3 null
; STOREI 0  $T13
;      predecessor   LABEL   label3
;      successor   EQ $P1 $T13 label5
;      gen
;      kill     $T13
;      in     $P1
;      out     $P1     $T13
;      ensure  $-15
;      allocate   $-15
;      r0 null;      r1 null;      r2 null;      r3 $-15
; EQ $P1 $T13 label5
;      predecessor   STOREI 0  $T13
;      successor   LABEL   label5
;      successor   STOREI 1  $T14
;      gen     $P1     $T13
;      kill
;      in     $P1     $T13
;      out
;      ensure  $6
;      allocate   $6
;      ensure  $-15
;      free   2  $6
;      free   3  $-15
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-15
;      r0 null;      r1 null;      r2 null;      r3 null
; STOREI 1  $T14
;      predecessor   EQ $P1 $T13 label5
;      successor   STOREI $T14  $R
;      gen
;      kill     $T14
;      in
;      out     $T14
;      ensure  $-16
;      allocate   $-16
;      r0 null;      r1 null;      r2 null;      r3 $-16
; STOREI $T14  $R
;      predecessor   STOREI 1  $T14
;      successor   RET   
;      gen     $T14
;      kill     $R
;      in     $T14
;      out
;      ensure  $-16
;      free   3  $-16
;      free   3  $-16
;      r0 null;      r1 null;      r2 null;      r3 null
; RET   
;      predecessor   STOREI $T14  $R
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-16
;      r0 null;      r1 null;      r2 null;      r3 null
; JUMP   label4
;      successor   LABEL   label4
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-16
;      r0 null;      r1 null;      r2 null;      r3 null
; LABEL   label5
;      predecessor   EQ $P1 $T13 label5
;      successor   LABEL   label4
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-16
;      r0 null;      r1 null;      r2 null;      r3 null
; LABEL   label4
;      predecessor   JUMP   label4
;      predecessor   JUMP   label4
;      predecessor   LABEL   label5
;      successor   RET   
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-16
;      r0 null;      r1 null;      r2 null;      r3 null
; RET   
;      predecessor   LABEL   label4
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-16
;      r0 null;      r1 null;      r2 null;      r3 null
; LABEL   main
;      successor   LINK   
;      gen
;      kill
;      in     eol     space     input
;      out     eol     space     input
;      free   0  
;      free   1  $-2
;      free   2  $6
;      free   3  $-16
;      r0 null;      r1 null;      r2 null;      r3 null
; LINK   
;      predecessor   LABEL   main
;      successor   STOREI 0  $T1
;      gen
;      kill
;      in     eol     space     input
;      out     eol     space     input
;      r0 null;      r1 null;      r2 null;      r3 null
; STOREI 0  $T1
;      predecessor   LINK   
;      successor   STOREI $T1  $L1
;      gen
;      kill     $T1
;      in     eol     space     input
;      out     eol     space     input     $T1
;      ensure  $-4
;      allocate   $-4
;      r0 null;      r1 null;      r2 null;      r3 $-4
; STOREI $T1  $L1
;      predecessor   STOREI 0  $T1
;      successor   WRITES   input
;      gen     $T1
;      kill     $L1
;      in     eol     space     input     $T1
;      out     $L1     eol     space     input
;      ensure  $-4
;      ensure  $-1
;      allocate   $-1
;      free   3  $-4
;      free   3  $-4
;      r0 null;      r1 null;      r2 $-1;      r3 null
; WRITES   input
;      predecessor   STOREI $T1  $L1
;      successor   READI   $L2
;      gen     input
;      kill
;      in     $L1     eol     space     input
;      out     $L1     eol     space
;      r0 null;      r1 null;      r2 $-1;      r3 null
; READI   $L2
;      predecessor   WRITES   input
;      successor   LABEL   label6
;      gen
;      kill     $L2
;      in     $L1     eol     space
;      out     $L2     $L1     eol     space
;      allocate   $-2
;      r0 null;      r1 null;      r2 $-1;      r3 $-2
; LABEL   label6
;      predecessor   READI   $L2
;      predecessor   JUMP   label6
;      successor   PUSH   
;      gen
;      kill
;      in     $L2     $L1     eol     space
;      out     $L2     $L1     eol     space
;      free   0  
;      free   1  $-2
;      free   2  $-1
;      store 2  $-1
;      free   3  $-2
;      store 3  $-2
;      r0 null;      r1 null;      r2 null;      r3 null
; PUSH   
;      predecessor   LABEL   label6
;      successor   PUSH   $L1
;      gen
;      kill
;      in     $L2     $L1     eol     space
;      out     $L2     $L1     eol     space
;      r0 null;      r1 null;      r2 null;      r3 null
; PUSH   $L1
;      predecessor   PUSH   
;      successor   JSR   F
;      gen     $L1
;      kill
;      in     $L2     $L1     eol     space
;      out     $L2     $L1     eol     space
;      ensure  $-1
;      allocate   $-1
;      r0 null;      r1 null;      r2 null;      r3 $-1
; JSR   F
;      predecessor   PUSH   $L1
;      successor   POP   
;      gen
;      kill
;      in     $L2     $L1     eol     space
;      out     $L2     $L1     eol     space
;      free   0  
;      r0 null;      r1 null;      r2 null;      r3 $-1
; POP   
;      predecessor   JSR   F
;      successor   POP   $T2
;      gen
;      kill
;      in     $L2     $L1     eol     space
;      out     $L2     $L1     eol     space
;      r0 null;      r1 null;      r2 null;      r3 $-1
; POP   $T2
;      predecessor   POP   
;      successor   STOREI $T2  $L3
;      gen
;      kill     $T2
;      in     $L2     $L1     eol     space
;      out     $L2     $L1     eol     space     $T2
;      allocate   $-5
;      r0 null;      r1 null;      r2 $-5;      r3 $-1
; STOREI $T2  $L3
;      predecessor   POP   $T2
;      successor   WRITEI   $L1
;      gen     $T2
;      kill     $L3
;      in     $L2     $L1     eol     space     $T2
;      out     $L2     $L1     eol     $L3     space
;      ensure  $-5
;      ensure  $-3
;      allocate   $-3
;      free   2  $-5
;      free   2  $-5
;      r0 null;      r1 $-3;      r2 null;      r3 $-1
; WRITEI   $L1
;      predecessor   STOREI $T2  $L3
;      successor   WRITES   space
;      gen     $L1
;      kill
;      in     $L2     $L1     eol     $L3     space
;      out     $L2     $L1     eol     $L3     space
;      ensure  $-1
;      r0 null;      r1 $-3;      r2 null;      r3 $-1
; WRITES   space
;      predecessor   WRITEI   $L1
;      successor   WRITEI   $L3
;      gen     space
;      kill
;      in     $L2     $L1     eol     $L3     space
;      out     $L2     $L1     eol     $L3     space
;      r0 null;      r1 $-3;      r2 null;      r3 $-1
; WRITEI   $L3
;      predecessor   WRITES   space
;      successor   WRITES   eol
;      gen     $L3
;      kill
;      in     $L2     $L1     eol     $L3     space
;      out     $L2     $L1     eol     space
;      ensure  $-3
;      free   1  $-3
;      r0 null;      r1 null;      r2 null;      r3 $-1
; WRITES   eol
;      predecessor   WRITEI   $L3
;      successor   STOREI 1  $T3
;      gen     eol
;      kill
;      in     $L2     $L1     eol     space
;      out     $L2     $L1     eol     space
;      r0 null;      r1 null;      r2 null;      r3 $-1
; STOREI 1  $T3
;      predecessor   WRITES   eol
;      successor   ADDI $L1 $T3 $T4
;      gen
;      kill     $T3
;      in     $L2     $L1     eol     space
;      out     $L2     $L1     $T3     eol     space
;      ensure  $-6
;      allocate   $-6
;      r0 null;      r1 null;      r2 $-6;      r3 $-1
; ADDI $L1 $T3 $T4
;      predecessor   STOREI 1  $T3
;      successor   STOREI $T4  $L1
;      gen     $L1     $T3
;      kill     $T4
;      in     $L2     $L1     $T3     eol     space
;      out     $L2     $T4     eol     space
;      ensure  $-1
;      ensure  $-6
;      free   3  $-1
;      free   2  $-6
;      r0 null;      r1 null;      r2 null;      r3 $-7
; STOREI $T4  $L1
;      predecessor   ADDI $L1 $T3 $T4
;      successor   STOREI $L2  $T5
;      gen     $T4
;      kill     $L1
;      in     $L2     $T4     eol     space
;      out     $L1     $L2     eol     space
;      ensure  $-7
;      ensure  $-1
;      allocate   $-1
;      free   3  $-7
;      free   3  $-7
;      r0 null;      r1 null;      r2 $-1;      r3 null
; STOREI $L2  $T5
;      predecessor   STOREI $T4  $L1
;      successor   EQ $L1 $T5 label7
;      gen     $L2
;      kill     $T5
;      in     $L1     $L2     eol     space
;      out     $L1     $T5     $L2     eol     space
;      ensure  $-2
;      allocate   $-2
;      ensure  $-8
;      allocate   $-8
;      r0 null;      r1 $-8;      r2 $-1;      r3 $-2
; EQ $L1 $T5 label7
;      predecessor   STOREI $L2  $T5
;      successor   JUMP   label6
;      successor   LABEL   label7
;      gen     $L1     $T5
;      kill
;      in     $L1     $T5     $L2     eol     space
;      out     $L2     $L1     eol     space
;      ensure  $-1
;      ensure  $-8
;      free   1  $-8
;      free   0  
;      free   1  $-8
;      free   2  $-1
;      store 2  $-1
;      free   3  $-2
;      r0 null;      r1 null;      r2 null;      r3 null
; JUMP   label6
;      predecessor   EQ $L1 $T5 label7
;      successor   LABEL   label6
;      gen
;      kill
;      in     $L2     $L1     eol     space
;      out     $L2     $L1     eol     space
;      free   0  
;      free   1  $-8
;      free   2  $-1
;      free   3  $-2
;      r0 null;      r1 null;      r2 null;      r3 null
; LABEL   label7
;      predecessor   EQ $L1 $T5 label7
;      successor   STOREI 0  $T6
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-8
;      free   2  $-1
;      free   3  $-2
;      r0 null;      r1 null;      r2 null;      r3 null
; STOREI 0  $T6
;      predecessor   LABEL   label7
;      successor   STOREI $T6  $R
;      gen
;      kill     $T6
;      in
;      out     $T6
;      ensure  $-9
;      allocate   $-9
;      r0 null;      r1 null;      r2 null;      r3 $-9
; STOREI $T6  $R
;      predecessor   STOREI 0  $T6
;      successor   RET   
;      gen     $T6
;      kill     $R
;      in     $T6
;      out
;      ensure  $-9
;      free   3  $-9
;      free   3  $-9
;      r0 null;      r1 null;      r2 null;      r3 null
; RET   
;      predecessor   STOREI $T6  $R
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  $-8
;      free   2  $-1
;      free   3  $-9
;      r0 null;      r1 null;      r2 null;      r3 null
;tiny code
str input "Please input an integer number: "
str space " "
str eol "\n"
push
push r0
push r1
push r2
push r3
jsr main
sys halt
label F
link 17
move $-3 r3
move 2 r3
move $6 r2
cmpi r2 r3
jle label1
move $-4 r3
move 1 r3
move $6 r2
subi r3 r2
push
push r2
push r0
push r1
push r2
push r3
jsr F
pop r3
pop r2
pop r1
pop r0
pop
pop r3
move $-1 r2
move r3 r2
move $-7 r3
move 2 r3
move $6 r1
subi r3 r1
push
push r1
push r0
push r1
push r2
push r3
jsr F
pop r3
pop r2
pop r1
pop r0
pop
pop r3
move $-2 r1
move r3 r1
move $-10 r3
move r2 r3
move $-11 r2
move r1 r2
addi r2 r3
move r3 $7
unlnk
ret
jmp label2
label label1
label label2
move $-13 r3
move 0 r3
move $6 r2
cmpi r2 r3
jne label3
move $-14 r3
move 0 r3
move r3 $7
unlnk
ret
jmp label4
label label3
move $-15 r3
move 0 r3
move $6 r2
cmpi r2 r3
jeq label5
move $-16 r3
move 1 r3
move r3 $7
unlnk
ret
jmp label4
label label5
label label4
unlnk
ret
label main
link 18
move $-4 r3
move 0 r3
move $-1 r2
move r3 r2
sys writes input
sys readi r3
move r2 $-1
move r3 $-2
label label6
push
move $-1 r3
push r3
push r0
push r1
push r2
push r3
jsr F
pop r3
pop r2
pop r1
pop r0
pop
pop r2
move $-3 r1
move r2 r1
sys writei r3
sys writes space
sys writei r1
sys writes eol
move $-6 r2
move 1 r2
addi r2 r3
move $-1 r2
move r3 r2
move $-2 r3
move $-2 r3
move $-8 r1
move r3 r1
cmpi r2 r1
move r2 $-1
jeq label7
jmp label6
label label7
move $-9 r3
move 0 r3
move r3 $6
unlnk
ret
end
