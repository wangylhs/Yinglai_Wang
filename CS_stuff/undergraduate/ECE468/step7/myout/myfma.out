; LABEL   add
;      successor   LINK   
;      gen
;      kill
;      in     $P1     $P2
;      out     $P1     $P2
;      free   0  
;      free   1  
;      free   2  
;      free   3  
;      r0 null;      r1 null;      r2 null;      r3 null
; LINK   
;      predecessor   LABEL   add
;      successor   ADDF $P1 $P2 $T1
;      gen
;      kill
;      in     $P1     $P2
;      out     $P1     $P2
;      r0 null;      r1 null;      r2 null;      r3 null
; ADDF $P1 $P2 $T1
;      predecessor   LINK   
;      successor   STOREF $T1  $L1
;      gen     $P1     $P2
;      kill     $T1
;      in     $P1     $P2
;      out     $T1
;      ensure  $7
;      allocate   $7
;      ensure  $6
;      allocate   $6
;      free   3  $7
;      free   2  $6
;      r0 null;      r1 null;      r2 null;      r3 $-2
; STOREF $T1  $L1
;      predecessor   ADDF $P1 $P2 $T1
;      successor   STOREF $L1  $R
;      gen     $T1
;      kill     $L1
;      in     $T1
;      out     $L1
;      ensure  $-2
;      ensure  $-1
;      allocate   $-1
;      free   3  $-2
;      free   3  $-2
;      r0 null;      r1 null;      r2 $-1;      r3 null
; STOREF $L1  $R
;      predecessor   STOREF $T1  $L1
;      successor   RET   
;      gen     $L1
;      kill     $R
;      in     $L1
;      out
;      ensure  $-1
;      free   2  $-1
;      free   2  $-1
;      r0 null;      r1 null;      r2 null;      r3 null
; RET   
;      predecessor   STOREF $L1  $R
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  
;      free   2  $-1
;      free   3  $-2
;      r0 null;      r1 null;      r2 null;      r3 null
; LABEL   multiply
;      successor   LINK   
;      gen
;      kill
;      in     $P1     $P2
;      out     $P1     $P2
;      free   0  
;      free   1  
;      free   2  $-1
;      free   3  $-2
;      r0 null;      r1 null;      r2 null;      r3 null
; LINK   
;      predecessor   LABEL   multiply
;      successor   MULTF $P1 $P2 $T1
;      gen
;      kill
;      in     $P1     $P2
;      out     $P1     $P2
;      r0 null;      r1 null;      r2 null;      r3 null
; MULTF $P1 $P2 $T1
;      predecessor   LINK   
;      successor   STOREF $T1  $L1
;      gen     $P1     $P2
;      kill     $T1
;      in     $P1     $P2
;      out     $T1
;      ensure  $7
;      allocate   $7
;      ensure  $6
;      allocate   $6
;      free   3  $7
;      free   2  $6
;      r0 null;      r1 null;      r2 null;      r3 $-2
; STOREF $T1  $L1
;      predecessor   MULTF $P1 $P2 $T1
;      successor   STOREF $L1  $R
;      gen     $T1
;      kill     $L1
;      in     $T1
;      out     $L1
;      ensure  $-2
;      ensure  $-1
;      allocate   $-1
;      free   3  $-2
;      free   3  $-2
;      r0 null;      r1 null;      r2 $-1;      r3 null
; STOREF $L1  $R
;      predecessor   STOREF $T1  $L1
;      successor   RET   
;      gen     $L1
;      kill     $R
;      in     $L1
;      out
;      ensure  $-1
;      free   2  $-1
;      free   2  $-1
;      r0 null;      r1 null;      r2 null;      r3 null
; RET   
;      predecessor   STOREF $L1  $R
;      gen
;      kill
;      in
;      out
;      free   0  
;      free   1  
;      free   2  $-1
;      free   3  $-2
;      r0 null;      r1 null;      r2 null;      r3 null
; LABEL   main
;      successor   LINK   
;      gen
;      kill
;      in     eol     equal     plus     star     third     second     first     intro
;      out     eol     equal     plus     star     third     second     first     intro
;      free   0  
;      free   1  
;      free   2  $-1
;      free   3  $-2
;      r0 null;      r1 null;      r2 null;      r3 null
; LINK   
;      predecessor   LABEL   main
;      successor   WRITES   intro
;      gen
;      kill
;      in     eol     equal     plus     star     third     second     first     intro
;      out     eol     equal     plus     star     third     second     first     intro
;      r0 null;      r1 null;      r2 null;      r3 null
; WRITES   intro
;      predecessor   LINK   
;      successor   WRITES   first
;      gen     intro
;      kill
;      in     eol     equal     plus     star     third     second     first     intro
;      out     eol     equal     plus     star     third     second     first
;      r0 null;      r1 null;      r2 null;      r3 null
; WRITES   first
;      predecessor   WRITES   intro
;      successor   READF   $L1
;      gen     first
;      kill
;      in     eol     equal     plus     star     third     second     first
;      out     eol     equal     plus     star     third     second
;      r0 null;      r1 null;      r2 null;      r3 null
; READF   $L1
;      predecessor   WRITES   first
;      successor   WRITES   second
;      gen
;      kill     $L1
;      in     eol     equal     plus     star     third     second
;      out     eol     equal     plus     star     $L1     third     second
;      allocate   $-1
;      r0 null;      r1 null;      r2 null;      r3 $-1
; WRITES   second
;      predecessor   READF   $L1
;      successor   READF   $L2
;      gen     second
;      kill
;      in     eol     equal     plus     star     $L1     third     second
;      out     eol     equal     plus     star     $L1     third
;      r0 null;      r1 null;      r2 null;      r3 $-1
; READF   $L2
;      predecessor   WRITES   second
;      successor   WRITES   third
;      gen
;      kill     $L2
;      in     eol     equal     plus     star     $L1     third
;      out     eol     equal     plus     $L2     star     $L1     third
;      allocate   $-2
;      r0 null;      r1 null;      r2 $-2;      r3 $-1
; WRITES   third
;      predecessor   READF   $L2
;      successor   READF   $L3
;      gen     third
;      kill
;      in     eol     equal     plus     $L2     star     $L1     third
;      out     eol     equal     plus     $L2     star     $L1
;      r0 null;      r1 null;      r2 $-2;      r3 $-1
; READF   $L3
;      predecessor   WRITES   third
;      successor   PUSH   
;      gen
;      kill     $L3
;      in     eol     equal     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      allocate   $-3
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; PUSH   
;      predecessor   READF   $L3
;      successor   PUSH   $L1
;      gen
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; PUSH   $L1
;      predecessor   PUSH   
;      successor   PUSH   $L2
;      gen     $L1
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      ensure  $-1
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; PUSH   $L2
;      predecessor   PUSH   $L1
;      successor   JSR   multiply
;      gen     $L2
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      ensure  $-2
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; JSR   multiply
;      predecessor   PUSH   $L2
;      successor   POP   
;      gen
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      free   0  
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; POP   
;      predecessor   JSR   multiply
;      successor   POP   
;      gen
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; POP   
;      predecessor   POP   
;      successor   POP   $T1
;      gen
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; POP   $T1
;      predecessor   POP   
;      successor   STOREF $T1  $L5
;      gen
;      kill     $T1
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1     $T1
;      allocate   $-6
;      r0 $-6;      r1 $-3;      r2 $-2;      r3 $-1
; STOREF $T1  $L5
;      predecessor   POP   $T1
;      successor   PUSH   
;      gen     $T1
;      kill     $L5
;      in     eol     equal     $L3     plus     $L2     star     $L1     $T1
;      out     eol     equal     $L3     plus     $L2     star     $L1     $L5
;      ensure  $-6
;      ensure  $-5
;      allocate   $-5
;      free   1  $-3
;      store 1  $-3
;      free   0  $-6
;      free   0  $-6
;      r0 null;      r1 $-5;      r2 $-2;      r3 $-1
; PUSH   
;      predecessor   STOREF $T1  $L5
;      successor   PUSH   $L5
;      gen
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1     $L5
;      out     eol     equal     $L3     plus     $L2     star     $L1     $L5
;      r0 null;      r1 $-5;      r2 $-2;      r3 $-1
; PUSH   $L5
;      predecessor   PUSH   
;      successor   PUSH   $L3
;      gen     $L5
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1     $L5
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      ensure  $-5
;      free   1  $-5
;      r0 null;      r1 null;      r2 $-2;      r3 $-1
; PUSH   $L3
;      predecessor   PUSH   $L5
;      successor   JSR   add
;      gen     $L3
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      ensure  $-3
;      allocate   $-3
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; JSR   add
;      predecessor   PUSH   $L3
;      successor   POP   
;      gen
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      free   0  $-6
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; POP   
;      predecessor   JSR   add
;      successor   POP   
;      gen
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; POP   
;      predecessor   POP   
;      successor   POP   $T2
;      gen
;      kill
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-1
; POP   $T2
;      predecessor   POP   
;      successor   STOREF $T2  $L4
;      gen
;      kill     $T2
;      in     eol     equal     $L3     plus     $L2     star     $L1
;      out     eol     equal     $L3     plus     $L2     star     $L1     $T2
;      allocate   $-7
;      r0 $-7;      r1 $-3;      r2 $-2;      r3 $-1
; STOREF $T2  $L4
;      predecessor   POP   $T2
;      successor   WRITEF   $L1
;      gen     $T2
;      kill     $L4
;      in     eol     equal     $L3     plus     $L2     star     $L1     $T2
;      out     eol     $L4     equal     $L3     plus     $L2     star     $L1
;      ensure  $-7
;      ensure  $-4
;      allocate   $-4
;      free   3  $-1
;      store 3  $-1
;      free   0  $-7
;      free   0  $-7
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-4
; WRITEF   $L1
;      predecessor   STOREF $T2  $L4
;      successor   WRITES   star
;      gen     $L1
;      kill
;      in     eol     $L4     equal     $L3     plus     $L2     star     $L1
;      out     eol     $L4     equal     $L3     plus     $L2     star
;      ensure  $-1
;      allocate   $-1
;      free   0  $-1
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-4
; WRITES   star
;      predecessor   WRITEF   $L1
;      successor   WRITEF   $L2
;      gen     star
;      kill
;      in     eol     $L4     equal     $L3     plus     $L2     star
;      out     eol     $L4     equal     $L3     plus     $L2
;      r0 null;      r1 $-3;      r2 $-2;      r3 $-4
; WRITEF   $L2
;      predecessor   WRITES   star
;      successor   WRITES   plus
;      gen     $L2
;      kill
;      in     eol     $L4     equal     $L3     plus     $L2
;      out     eol     $L4     equal     $L3     plus
;      ensure  $-2
;      free   2  $-2
;      r0 null;      r1 $-3;      r2 null;      r3 $-4
; WRITES   plus
;      predecessor   WRITEF   $L2
;      successor   WRITEF   $L3
;      gen     plus
;      kill
;      in     eol     $L4     equal     $L3     plus
;      out     eol     $L4     equal     $L3
;      r0 null;      r1 $-3;      r2 null;      r3 $-4
; WRITEF   $L3
;      predecessor   WRITES   plus
;      successor   WRITES   equal
;      gen     $L3
;      kill
;      in     eol     $L4     equal     $L3
;      out     eol     $L4     equal
;      ensure  $-3
;      free   1  $-3
;      r0 null;      r1 null;      r2 null;      r3 $-4
; WRITES   equal
;      predecessor   WRITEF   $L3
;      successor   WRITEF   $L4
;      gen     equal
;      kill
;      in     eol     $L4     equal
;      out     eol     $L4
;      r0 null;      r1 null;      r2 null;      r3 $-4
; WRITEF   $L4
;      predecessor   WRITES   equal
;      successor   WRITES   eol
;      gen     $L4
;      kill
;      in     eol     $L4
;      out     eol
;      ensure  $-4
;      free   3  $-4
;      r0 null;      r1 null;      r2 null;      r3 null
; WRITES   eol
;      predecessor   WRITEF   $L4
;      successor   STOREI 0  $T3
;      gen     eol
;      kill
;      in     eol
;      out
;      r0 null;      r1 null;      r2 null;      r3 null
; STOREI 0  $T3
;      predecessor   WRITES   eol
;      successor   STOREI $T3  $R
;      gen
;      kill     $T3
;      in
;      out     $T3
;      ensure  $-8
;      allocate   $-8
;      r0 null;      r1 null;      r2 null;      r3 $-8
; STOREI $T3  $R
;      predecessor   STOREI 0  $T3
;      successor   RET   
;      gen     $T3
;      kill     $R
;      in     $T3
;      out
;      ensure  $-8
;      free   3  $-8
;      free   3  $-8
;      r0 null;      r1 null;      r2 null;      r3 null
; RET   
;      predecessor   STOREI $T3  $R
;      gen
;      kill
;      in
;      out
;      free   0  $-1
;      free   1  $-3
;      free   2  $-2
;      free   3  $-8
;      r0 null;      r1 null;      r2 null;      r3 null
;tiny code
str intro "You will be asked for three float numbers\n"
str first "Please enter the first float number: "
str second "Please enter the second float number: "
str third "Please enter the third float number: "
str eol "\n"
str star "*"
str plus "+"
str equal "="
push
push r0
push r1
push r2
push r3
jsr main
sys halt
label add
link 16
move $7 r3
move $6 r2
addr r2 r3
move $-1 r2
move r3 r2
move r2 $8
unlnk
ret
label multiply
link 16
move $7 r3
move $6 r2
mulr r2 r3
move $-1 r2
move r3 r2
move r2 $8
unlnk
ret
label main
link 20
sys writes intro
sys writes first
sys readr r3
sys writes second
sys readr r2
sys writes third
sys readr r1
push
push r3
push r2
push r0
push r1
push r2
push r3
jsr multiply
pop r3
pop r2
pop r1
pop r0
pop
pop
pop r0
move r1 $-3
move $-5 r1
move r0 r1
push
push r1
move $-3 r1
push r1
push r0
push r1
push r2
push r3
jsr add
pop r3
pop r2
pop r1
pop r0
pop
pop
pop r0
move r3 $-1
move $-4 r3
move r0 r3
move $-1 r0
sys writer r0
sys writes star
sys writer r2
sys writes plus
sys writer r1
sys writes equal
sys writer r3
sys writes eol
move $-8 r3
move 0 r3
move r3 $6
unlnk
ret
end
