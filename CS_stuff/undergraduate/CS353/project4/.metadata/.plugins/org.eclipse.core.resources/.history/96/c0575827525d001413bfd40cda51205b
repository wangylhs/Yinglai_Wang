import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.atomic.AtomicInteger;




public class NonBlockingPseudoRandom extends PseudoRandom {
    //private final Lock lock = new ReentrantLock(false);
    private AtomicInteger seed;

    NonBlockingPseudoRandom (int seed) {
        this.seed = new AtomicInteger(seed);
    }

     public int nextInt (int n) {
        lock.lock();
        try {
           int s = seed;
           seed = calculateNext(s);
           int remainder = s % n;
           return remainder > 0 ? remainder : remainder + n;
        } finally { 
                     lock.unlock();
        }
   }
}

