/* {\Tt all.h} for \impcore 25 */
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <setjmp.h>
#include <ctype.h>
/* shared type definitions 28c */
typedef struct Name *Name;
typedef struct Namelist *Namelist;   /* list of Name */
/* shared type definitions 31a */
typedef struct Reader *Reader;
/* shared type definitions 31d */
typedef struct Defreader *Defreader;
/* shared type definitions 34a */
/* definition of [[va_list_box]] 35a */
typedef struct va_list_box {
  va_list ap;
} va_list_box;
typedef void Printer(FILE *output, va_list_box*);
/* shared type definitions 585d */
typedef struct Parlist *Parlist; /* list of Par */
/* shared type definitions (generated by a script) */
typedef struct Par *Par;
typedef enum { ATOM, LIST } Paralt; 
/* type definitions for \impcore 28a */
typedef struct Explist *Explist; /* list of Exp */
/* type definitions for \impcore 29a */
typedef int Value;
typedef struct Valuelist *Valuelist;     /* list of Value */
/* type definitions for \impcore 29c */
typedef struct Funlist *Funlist; /* list of Fun */
/* type definitions for \impcore 30a */
typedef struct Valenv *Valenv;
typedef struct Funenv *Funenv;
/* type definitions for \impcore (generated by a script) */
typedef struct Exp *Exp;
typedef enum { LITERAL, VAR, SET, IFX, WHILEX, BEGIN, APPLY } Expalt;

/* type definitions for \impcore (generated by a script) */
typedef struct Userfun Userfun; 
typedef struct Def *Def;
typedef enum { VAL, EXP, DEFINE, USE } Defalt; 
/* type definitions for \impcore (generated by a script) */
typedef struct Fun Fun;
typedef enum { USERDEF, PRIMITIVE } Funalt; 
/* shared structure definitions 588c */
struct Reader {
    char *buf;               /* holds the last line read */
    int nbuf;                /* size of buf */
    int line;                /* current line number */
    const char *readername;  /* identifies this reader */

    FILE *fin;               /* filereader */
    const char *s;           /* stringreader */
};
/* shared structure definitions (generated by a script) */
struct Par { Paralt alt; union { Name atom; Parlist list; } u; }; 
/* structure definitions for \impcore (generated by a script) */
struct Exp {
    Expalt alt;
    union {
        Value literal;
        Name var;
        struct { Name name; Exp exp; } set;
        struct { Exp cond; Exp true; Exp false; } ifx;
        struct { Exp cond; Exp exp; } whilex;
        Explist begin;
        struct { Name name; Explist actuals; } apply;
    } u;
};

/* structure definitions for \impcore (generated by a script) */
struct Userfun { Namelist formals; Exp body; }; 
struct Def {
    Defalt alt;
    union {
        struct { Name name; Exp exp; } val;
        Exp exp;
        struct { Name name; Userfun userfun; } define;
        Name use;
    } u;
};

/* structure definitions for \impcore (generated by a script) */
struct Fun { Funalt alt; union { Userfun userdef; Name primitive; } u; }; 
/* structure definitions for \impcore (generated by a script) */
struct Explist {
	Exp hd;
	Explist tl;
};

struct Parlist {
	Par hd;
	Parlist tl;
};

struct Valuelist {
	Value hd;
	Valuelist tl;
};

struct Funlist {
	Fun hd;
	Funlist tl;
};

struct Namelist {
	Name hd;
	Namelist tl;
};

/* shared function prototypes 28d */
Name strtoname(const char *s);
const char *nametostr(Name n);
/* shared function prototypes 28e */
Printer printname;
/* shared function prototypes 31b */
char *readline(Reader r, char *prompt);
/* shared function prototypes 31c */
Reader stringreader(const char *stringname, const char *s);
Reader filereader  (const char *filename,   FILE *fin);
/* shared function prototypes 31e */
Def readdef(Defreader r);
/* shared function prototypes 31f */
Defreader defreader(Reader r, int doprompt);
/* shared function prototypes 33f */
void print (const char *fmt, ...);  /* print to standard output */
void fprint(FILE *output, const char *fmt, ...);  /* print to given file */
/* shared function prototypes 34b */
void installprinter(unsigned char c, Printer *fmt);
/* shared function prototypes 34c */
Printer printpercent, printstring, printdecimal;
/* shared function prototypes 34d */
void vprint(FILE *output, const char *fmt, va_list_box *box);
/* shared function prototypes 35b */
void error(const char *fmt, ...);
extern jmp_buf errorjmp;        /* longjmp here on error */
/* shared function prototypes 35c */
void checkargc(Exp e, int expected, int actual);
/* shared function prototypes 35d */
Name duplicatename(Namelist names);
/* shared function prototypes 585e */
Printer printpar;
/* shared function prototypes 585f */
Parlist readparlist(Reader r, int doquote, int doprompt);
/* shared function prototypes 591c */
extern int checkoverflow(int limit);
/* shared function prototypes (generated by a script) */
Par mkAtom(Name atom);
Par mkList(Parlist list);
struct Par mkAtomStruct(Name atom);
struct Par mkListStruct(Parlist list);
/* function prototypes for \impcore 28b */
Printer printexp, printdef;
/* function prototypes for \impcore 29b */
Printer printvalue;
/* function prototypes for \impcore 29g */
Printer printfun;
/* function prototypes for \impcore 30b */
Valenv mkValenv(Namelist vars, Valuelist vals);
Funenv mkFunenv(Namelist vars, Funlist   defs);
/* function prototypes for \impcore 30c */
Value fetchval(Name name, Valenv env);
Fun   fetchfun(Name name, Funenv env);
/* function prototypes for \impcore 30d */
int isvalbound(Name name, Valenv env);
int isfunbound(Name name, Funenv env);
/* function prototypes for \impcore 30e */
void bindval(Name name, Value val, Valenv env);
void bindfun(Name name, Fun   fun, Funenv env);
/* function prototypes for \impcore 31g */
void  evaldef(Def d, Valenv globals, Funenv functions, int echo);
Value eval   (Exp e, Valenv globals, Funenv functions, Valenv formals);
/* function prototypes for \impcore 32a */
void readevalprint(Defreader r, Valenv globals, Funenv functions, int echo);
/* function prototypes for \impcore (generated by a script) */
Exp mkLiteral(Value literal);
Exp mkVar(Name var);
Exp mkSet(Name name, Exp exp);
Exp mkIfx(Exp cond, Exp true, Exp false);
Exp mkWhilex(Exp cond, Exp exp);
Exp mkBegin(Explist begin);
Exp mkApply(Name name, Explist actuals);
struct Exp mkLiteralStruct(Value literal);
struct Exp mkVarStruct(Name var);
struct Exp mkSetStruct(Name name, Exp exp);
struct Exp mkIfxStruct(Exp cond, Exp true, Exp false);
struct Exp mkWhilexStruct(Exp cond, Exp exp);
struct Exp mkBeginStruct(Explist begin);
struct Exp mkApplyStruct(Name name, Explist actuals);
/* function prototypes for \impcore (generated by a script) */
Userfun mkUserfun(Namelist formals, Exp body);
Def mkVal(Name name, Exp exp);
Def mkExp(Exp exp);
Def mkDefine(Name name, Userfun userfun);
Def mkUse(Name use);
struct Def mkValStruct(Name name, Exp exp);
struct Def mkExpStruct(Exp exp);
struct Def mkDefineStruct(Name name, Userfun userfun);
struct Def mkUseStruct(Name use);
/* function prototypes for \impcore (generated by a script) */
Fun mkUserdef(Userfun userdef);
Fun mkPrimitive(Name primitive);
/* function prototypes for \impcore (generated by a script) */
int     lengthEL (Explist l);
Exp     nthEL    (Explist l, unsigned n);
Explist mkEL     (Exp hd, Explist tl);
Printer printexplist;
/* function prototypes for \impcore (generated by a script) */
int     lengthPL (Parlist l);
Par     nthPL    (Parlist l, unsigned n);
Parlist mkPL     (Par hd, Parlist tl);
Printer printparlist;
/* function prototypes for \impcore (generated by a script) */
int       lengthVL (Valuelist l);
Value     nthVL    (Valuelist l, unsigned n);
Valuelist mkVL     (Value hd, Valuelist tl);
Printer   printvaluelist;
/* function prototypes for \impcore (generated by a script) */
int     lengthFL (Funlist l);
Fun     nthFL    (Funlist l, unsigned n);
Funlist mkFL     (Fun hd, Funlist tl);
Printer printfunlist;
/* function prototypes for \impcore (generated by a script) */
int      lengthNL (Namelist l);
Name     nthNL    (Namelist l, unsigned n);
Namelist mkNL     (Name hd, Namelist tl);
Printer  printnamelist;
